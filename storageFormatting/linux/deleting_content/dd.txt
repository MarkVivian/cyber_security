                        USING DD
                    ==============
- dd is used to convert and copy files. 
- It is very powerful and can be used for tasks like:
    > backing up the boot sector of a hard drive,
    > creating disk images, 
    >and securely erasing data.


            BASIC SYNTAX
        ==================
EG.
    dd if=<input file> of=<output file> [options]

        > if= 
            - specifies the input file or device.
                EG.
                    if=/dev/urandom
                        
                        - means the input is the random data generator.


        > of=
            - specifies the output file or device.
                EG.
                    of=/dev/sdb

                        -means the output is written to the specified drive.


        > [options]
            - Additional options to control the behavior of dd.


1. Creating a disk image.
    EG.
        dd if=/dev/sda of=backup.img
        
            - creates a disk image of the entire hard drive or partition(/dev/sda).
            - iso is an image of a cd or dvd.
            - img is an image of a hard drive or partition.
            - img is a raw image, which means it is a binary copy of the entire drive
            - use dd to write the image to the drive. 
                EG.
                    dd if=backup.img of=/dev/sdb  

            - the img of a hard drive takes the same space as the data in the hard disk.
            - This means if the hard drive takes 4 Gigabytes the img will also take 4 Gigabytes.
            - the iso takes less space.            
            


2. copying a file.
    EG.
        dd if=source.txt of=destination.txt

            - copies the contents of source file to destination file.
            - The destination file will be overwritten if it already exists.
            - The source file will not be modified.


3. writing random data to a drive.
    EG.
        dd if=/dev/urandom of=/dev/sdb bs=4M status=progress
            
            > bs
                - it specifies the block size (the amount of data that dd reads and writes at one time.).
                - The default block size is 512 bytes.
                - The larger the block size, the faster the transfer.
                - The smaller the block size, the more accurate the transfer.
                - 4M stands for 4 megabytes and tells dd to process data in chunks of 4 megabytes at a time.
                - Why use 4M
                    > Efficiency:
                        - Larger block sizes can be more efficient because they reduce the number of read/write operations.
                        -  However, if the block size is too large, it might use more memory and cause the system to slow down.

                    > Speed:
                        - For most operations, a block size of 4 megabytes is a good balance between speed and system resource usage. 
                        - Smaller block sizes (like the default 512 bytes) might result in a lot of small, slow operations, 
                        - while excessively large block sizes might not significantly increase speed and could use too much RAM.


            >status=progress
                - option displays the progress of the transfer.


4. wiping a device.
    EG.
        dd if=/dev/zero of=/dev/sdb bs=4M status=progress

            - This writes zeroes to the entire /dev/sdb drive, making any previous data much harder to recover.


5. Writing zeroes to a file:
    EG.
        dd if=/dev/zero of=zeroed_file bs=1M count=100 

            > count =
                - Limits the number of blocks to copy. 
                    EG.
                        count=10

                            - copies the first 10 blocks of the input file to the output file.
                            - the default is to copy the entire input file to the output file.



