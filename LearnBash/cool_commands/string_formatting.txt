                    STRING FORMATTING.
                ========================
1. Removing Leading and Trailing Spaces
    -  You can remove leading and trailing spaces from a string using parameter expansion: 
        EG.
            string="   Hello World!   "
            trimmed="${string#"${string%%[![:space:]]*}"}" # Remove leading spaces
            trimmed="${trimmed%"${trimmed##*[![:space:]]}"}" # Remove trailing spaces

            echo "$trimmed" # Output: "Hello World!"

    - You can also use xargs.
        - The xargs command is used in the script to trim leading and trailing spaces from the output of cut.
        EG.
            wifi_name=$(echo "$line" | grep "Profile:" | cut -d ':' -f 2 | xargs)

                grep "Profile:": Extracts the line containing Profile:.
                cut -d ':' -f 2: Splits the line at the colon (:) and extracts the second field (the value after Profile:).
                xargs: Removes any leading or trailing whitespace from the extracted value, ensuring clean results.

    - using awk.
        EG. 
            wifi_name=$(echo "$wifi_name" | awk '{$1=$1;print}')

                $1=$1 rebuilds the line, removing extra spaces.
                print outputs the trimmed string.


2. Splitting strings.
    - To split a string into an array based on a delimiter, you can use the IFS (Internal Field Separator):
        EG.
            string="apple,banana,cherry"
            IFS=',' read -r -a array <<< "$string"

            for fruit in "${array[@]}"; do
                echo "$fruit"
            done

            OUTPUT.
                apple
                banana
                cherry



3. Replacing Substrings
    -  You can replace substrings within a string using parameter expansion: 
        EG.
            string="Hello World!"
            modified="${string/World/Bash}"
            echo "$modified" # Output: "Hello Bash!"


4. removing substrings.
    -  Remove from the end:
        EG.
            filename="example.txt"
            echo "${filename%.txt}" # Output: example

    -  Remove from the beginning:
        EG.
            path="/home/user/documents"
            echo "${path#/home/user/}" # Output: documents


5. LENGTH OF A STRING.
    - To get the length of a string, use the ${#variable} syntax.
        EG
            echo ${#mystring}  # Output: 13


6. SUBSTRING EXTRACTION.
    - Extracting a Substring from a Specific Position
    - You can extract a substring from a string using ${string:start:length}.   
        EG.
            var="System Commands"
            echo ${var:0:6}  # Output: System

    - Extracting from the End of a String
    - To extract characters from the end, you can use negative indices. 
        EG.
            echo ${var: -8}  # Output: Commands