                        READ.
                    =============
-p (Prompt)
    - The -p option allows you to specify a prompt to display before reading the input.
        EG.
            #!/bin/bash
            read -p "Enter your name: " name
            echo "Hello, $name!"

                - In this example, the script prompts the user to enter their name and then greets them.


-e (Readline)
    - The -e option allows the user to edit the input line with Readline's capabilities, which include features like history and autocompletion.
        EG.
            #!/bin/bash
            read -e -p "Enter a command: " command
            echo "You entered: $command"

                - the user can use the left/right arrow keys, Ctrl + a/e, and other Readline shortcuts while entering the command.


-n (Number of Characters)
    - The -n option limits the input to a specified number of characters. 
    - The read command will return after reading the specified number of characters.
        EG.
            #!/bin/bash
            read -n 1 -p "Press any key to continue..."
            echo
            echo "You pressed a key!"

                - In this example, the script waits for the user to press a single key and then proceeds.


-s (Silent)
    - The -s option makes the input silent, which is useful for passwords.
        EG.
            #!/bin/bash
            read -s -p "Enter your password: " password
            echo
            echo "Password read (but not displayed)."

                - This script will prompt the user for a password without showing the typed characters on the screen.


-r (Raw Input)
    - The -r option tells read not to treat backslashes as escape characters.
        EG.
            #!/bin/bash
            read -r -p "Enter a string with backslashes: " input
            echo "You entered: $input"

                - Without -r, backslashes in the input would be interpreted as escape characters, which might not be desired.


-a (Array)
    - The -a option reads the input into an array.
        EG.
            #!/bin/bash
            echo "Enter words separated by spaces:"
            read -a words
            echo "You entered ${#words[@]} words."
            for word in "${words[@]}"; {
                echo "$word"
            }

                - This script reads a line of input and stores each word in an element of the words array.


-t (Timeout)
    - The -t option allows you to specify a timeout for the input.
        EG.
            #!/bin/bash

            if read -t 5 -p "Enter your name (you have 5 seconds): " name; then
                echo "Hello, $name!"
            else
                echo
                echo "Timed out."
            fi

                - In this example, the script waits for the user to enter their name for up to 5 seconds. 
                - If the user doesn't provide input within the time limit, the script proceeds.


-d (Delimiter)
    - The -d option allows you to specify a custom delimiter for the input.
        EG.
            #!/bin/bash

            read -d ":" -p "Enter some input ending with a colon: " input
            echo "You entered: $input"

                - This script reads input until it encounters a colon (:).


-i <text>
    - The -i option allows you to set an initial text that appears in the input line before the user starts typing.
    - This is useful for providing a default value or hint to the user. Example:
        EG.
            read -i "Default Name" -p "Enter your name: " name
            echo "Hello, $name!"

                - In this example:
                    > If the user simply presses Enter without typing anything, the variable name will be set to "Default Name".
                    > If the user types a different name, that input will replace the default.


-N <number>	
    - The -N option tells the read command to read a specified number of characters from the input, ignoring delimiters.
    - This means it will not stop reading at spaces or newlines.
        EG.
            read -N 5 -p "Enter up to 5 characters: " input
            echo "You entered: $input"

                - In this example:
                    > The command will read exactly 5 characters from the user input.
                    > If the user types more than 5 characters, they must press Enter to finalize their input, but only the first 5 characters will be captured.


-u <file descriptor>	
    - The -u option allows you to specify a file descriptor from which to read input instead of standard input (stdin).
    - By default, read takes input from stdin (usually the keyboard).
        EG.
            # Create a file and write some text into it
            echo "This is a test." > testfile.txt

            # Read from file descriptor 3 (which we will open for reading testfile.txt)
            exec 3< testfile.txt
            read -u 3 line
            echo "Read from file: $line"

            # Close file descriptor 3
            exec 3<&-

                - In this example:
                    > We create a file named testfile.txt and write a line of text into it.
                    > We then open that file for reading through file descriptor 3.
                    > The read -u 3 line command reads from that file descriptor instead of stdin.
                    > Finally, we close the file descriptor to free up resources.
