                    HERE EOF
                ================
- This are a way to inject multi-line text into commands within your terminal. 
- They're useful in shell scripting where you'd need to create a separate file.


- Basic syntax.
    EG.
        command << EOF 
            your multiple lines here.
        EOF

            - command (optional):
                > This is the command that will receive the content of your here document. 
                > Common examples include cat, mail, or even custom scripts.
            <<: 
                > This redirection operator indicates the start of the here document.
            EOF (or any unique identifier): 
                > This is the delimiter that marks the end of the here document. 
                > It should appear on a new line by itself and shouldn't be indented. 


1. Creating Multi-line Text files.
    - Imagine you want to create a quick text file with some content. 
    - You can use cat with a here document:
        EG.
            cat << EOF << file.txt
            This is some content.
            For my new text file.
            EOF

                - This creates a file named myfile.txt with the specified content.


                        HERE STRINGS.
                    =======================
- A here string is a simplified version of a here document.
- It allows you to pass a single string as input to a command using the <<< operator.
- This method is cleaner and more efficient for short strings compared to using pipes or temporary files.

        
        BASIC STRUCTURE.
    ----------------------
EG.
    COMMAND <<< "string"


        COMMAND: The command that will receive the input.
        <<<: The operator that denotes a here string.
        "string": The string that will be passed to the command's stdin.


                DETAILED EXAMPLE.
            ------------------------
1. Simple Usage.
    - You can use here strings to pass simple strings directly to commands. For example, using cat to display a string:
        EG.
            cat <<< "Hello, World!"

                - OUTPUT.
                    Hello, World!


2. Using variables.
    - Here strings can be used with variables.
        EG.
            greeting="Hello, Bash!"
            cat <<< "$greeting"
 
                - OUTPUT.
                    Hello, Bash!


3. multi-line input.
    - Although here strings are typically used for single lines, you can still pass multi-line strings by including newline characters (\n).
    - However, it's more common to use here documents for multi-line input. Hereâ€™s how you might do it with a here string:
        EG.
            multi_line="Line 1\nLine 2\nLine 3"
            echo -e "$multi_line" | cat <<< "$multi_line"

                - OUTPUT.
                    Line 1
                    Line 2
                    Line 3


4. Using with Commands
    - Here strings are particularly useful when you want to provide input directly to commands like grep, awk, or bc.
    - For example, using grep:
        EG.
            grep "pattern" <<< "This is a test line with pattern."

                - OUTPUT.
                    This is a test line with pattern.


5. Reading into an array.
    - Reading into an Array You can also read words from a here string into an array using the read command:
        EG.
            read -ra words <<< "apple banana cherry"

            for word in "${words[@]}"; do
                echo "Fruit: $word"
            done

                - OUTPUT.
                    Fruit: apple
                    Fruit: banana
                    Fruit: cherry


6. Escaping Special Characters.
    - If your string contains special characters (like $, \, or backticks), you can use single quotes to prevent variable expansion:
        EG.
            cat <<< 'Display special characters: $ ` \'

                - OUTPUT.
                    Display special characters: $ ` \
