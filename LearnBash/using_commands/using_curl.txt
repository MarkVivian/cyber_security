                        CURL
                    ==========
- This is a command line tool for transferring data using various protocols.


            COMMON FLAGS.
        -------------------
| Flag | Meaning                     |
| ---- | --------------------------- |
| `-i` | Include response headers    |
| `-I` | HEAD request (headers only) |
| `-L` | Follow redirects            |
| `-v` | Verbose output              |
| `-d` | POST data                   |
| `-H` | Custom header               |
| `-A` | User-Agent                  |
| `-X` | Set request method          |
| `-o` | Output to file              |
| `-O` | Save as remote filename     |
| `-u` | Basic auth                  |
| `-b` | Send cookies                |
| `-c` | Save cookies                |
| `-x` | Use proxy                   |
|  -s  | Silent mode. It makes the curl output less verbose.|
|  -S  | when used with -s, shows error messages despite silent mode|


        BASIC SYNTAX.
    --------------------
EG.
    curl [options] [url]


        USAGE
    -------------
SECTION 1: Basic GET Request.
    EG.
        curl http://httpbin.org/get 

            - Sends a simple GET request.
            - Returns the raw HTML/JSON response to your terminal.
                EG. 
                    {
                        "args": {},
                        "headers": {
                            "Accept": "*/*",
                            "Host": "httpbin.org",
                            "User-Agent": "curl/8.14.1",
                            "X-Amzn-Trace-Id": "Root=1-685ef609-38b70ea90673c3ef47b4a4ea"
                        },
                        "origin": "197.248.143.163",
                        "url": "http://httpbin.org/get"
                    }



SECTION 2: View Response Headers with -i 
    EG.
        curl -i http://httpbin.org/get 

            - -i includes the HTTP response headers in the output (status line, content type, cookies, etc)
                EG.
                    HTTP/1.1 200 OK
                    Date: Fri, 27 Jun 2025 19:53:14 GMT
                    Content-Type: application/json
                    Content-Length: 256
                    Connection: keep-alive
                    Server: gunicorn/19.9.0
                    Access-Control-Allow-Origin: *
                    Access-Control-Allow-Credentials: true

                    {
                    "args": {},
                    "headers": {
                        "Accept": "*/*",
                        "Host": "httpbin.org",
                        "User-Agent": "curl/8.14.1",
                        "X-Amzn-Trace-Id": "Root=1-685ef6aa-71a20680647538ca12f648a1"
                    },
                    "origin": "197.248.143.163",
                    "url": "http://httpbin.org/get"
                    }


SECTION 3: save output to a File with -o and -O 
    EG.
        curl -o file.html http://example.com 

            - saves output as file.html 
                EG.
                    curl -O http://example.com/index.html 

                        - saves file with original name (index.html)
                        - -o lets you specify a name 
                        - -O uses the filename in the URL.


SECTION 4: Send a POST Request with -d 
    EG. 
        curl -d "username=admin&password=1234" http://example.com/login 

            - or specify content type.
                EG.
                    curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "username=admin&password=1234" http://example.com/login 

                    EG.
                        curl -d "foo=bar" http://httpbin.org/post 

                            - -d means POST by default unless overridden with -X 
                            - sends application/x-www-form-urlencoded unless you specify otherwise.

            - you can use -d multiple times.
                EG.
                    curl -d "param1=value1" -d "param2=value2" http://example.com
                        OR WITH FILE 
                   curl -d @data.txt http://example.com 


SECTION 5: Custom Headers with -H 
    EG. 
        curl -H "User-Agent: Cybertool/1.0" http://example.com 
            EG.
                curl -H "X-Custom-Header: test123" http://httpbin.org/headers 

                    - Sends a custom HTTP header (e.g. to spoof a browser, API Key, etc )
        
        - it can be used multiple times.
            EG.
                curl -H "Header1: value1" -H "Header2: value2" http://example.com
            

SECTION 6: Use Cookies with -b and -c 
    EG. (send cookies)
        curl -b "sessionid=abc123" http://example.com/dashboard
    
    EG. (save cookies)
        curl -c cookies.txt http://example.com 

            -b sends cookies manually or from a file.
            -c saves response cookies to a file.


SECTION 7: Show Only Headers with -I (uppercase i)
    EG. 
        curl -I http://example.com 

            - performs a HEAD request- show only response headers, not the body.


SECTION 8: Follow Redirects with -L
    EG.
        curl -L http://example.com 
            - Follows 3xx HTTP redirects (like 301, 302 ) until it gets a final response.


SECTION 9: Set Request Type with -X 
    EG. 
        curl -X DELETE http://example.com/api/resource/1

            - Forces a specific request method (useful for REST APIs)


SECTION 10 : Download Multiple Files.
    EG.
        curl -O http://example.com/file1.jpg -O http://example.com/file2.jpg 

            - Use mutliple -O options for batch downloads.


SECTION 11: Authenticate with -u
    EG.
        curl -u admin:password http://example.com/protected 

            - Perform basic HTTP authentication


SECTION 12: Use Proxy with -x
    EG.
        curl -x http://127.0.0.1:8080 http://example.com 

            - useful for intercepting traffic in Burp Suite or routing traffic trhough Tor/Proxy.


SECTION 13: Inspect Everything with -v or --trace 
    EG. (verbose)
        curl -v http://example.com 

    EG (Full trace)
        curl --trace-ascii trace.txt http://example.com

            -v shows request + response headers.
            --trace shows raw bytes in a file.


SECTION 14: User-Agent Spoofing 
    EG. 
        curl -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36" http://example.com 

            - Fakes a browser User-Agent to avoid bot detection or for testing.


SECTION 15: Send JSON with -H and -d 
    EG. 
        curl -X POST http://example.com/api -H "Content-Type: application/json" -d '{"username":"admin", "password":"pass"}'

            - Use this when working with modern REST APIs.


SECTION 16: Multipart/Form-Date upload with `-F`
    EG.
        curl -F "file=@exploit.lua" http://target/upload

            - `-F` sends data as multipart/form-data. 
            - its like filling out a web form that asks you to pick files from the terminal.
            - use @filename to upload a file.
                EG.
                    curl -F "username=admin" -F "avatar=@pic.jpg" http://example.com/profile

                        - it supports both file uploads and form fields.


SECTION 17: Insecure SSL/TLS with `-k`/`--insecure`
    EG.
        curl -k https://self-signed.badssl.com/

            - `-k` tells curl to skip certificate verification (userful for self-signed certs)
            - `--insecure` is the full-name equivalent.
            - Using -k skips certificate verification, which can expose you to risks like man-in-the-middle attacks. Use only for testing or trusted self-signed certificates.


SECTION 18: Custom Timeout with `--max-time' and `--connect-timeout`
    EG.
        curl --connect-timeout 5 --max-time 10 http://example.com

            - `--connect-timeout 5`: fail if no connection in 5 seconds.
            - `--max-time 10`: overall operation timeout of 10 seconds.


SECTION 19: Write-Out Variables with `-w`/`--write-out`
    EG.
        curl -o /dev/null -s -w "HTTP Code: %{http_code}\nTime: %{time_total}s\n" http://example.com

            - `-w` allows printing metrics after the request (status, timings, size, etc.).


SECTION 20: Retry on Transient Failures with `--retry`
    EG.
        curl --retry 3 --retry-delay 2 http://example.com/unreliable

            - `--retry 3`: retry up to 3 times on transient errors.
            - `--retry-delay 2`: wait 2 seconds between retries.


