                        OWNERSHIP IN LINUX
                    ===========================
- In Linux, every file and directory has an owner and a group associated with it. 
- The owner is typically the user who created the file, and the group is usually a primary group of that user.
    >> User(Owner) : The person who owns the file
    >> Group : A set of users. All users in the group have certain permissions to the file.


- You can view the ownership and permissions of a file using:
    EG.
        ls -l filename

            - this will output the following:
                EG.
                    -rwxr-xr-- 1 user group 4096 Jun 13 12:34 filename

                        `-rwxr-xr--` : indicates the permissions.
                        `user` : is the owner.
                        `group` : is the group.


                    
                        CHANGING OWNERSHIP
                    ==========================
- To change the ownership of a file:
    EG.
        chown newuser filename


- To change the group ownership.
    EG.
        chown :newgroup filename


- To change both owner and group:
    EG.
        chown newuser:newgroup filename


                PERMISSIONS 
            =================
-Permissions determine who can read, write or execute the file:
    r(read) : Permission to read the file.
    w(write) : Permission to modify the file.
    x(execute) : Permission to execute the file.


- Permissions are divided into 3 categories:
    User (owner) permissions.
    Group permissions.
    Others permissions.


- If the current user is different from the file owner:
    The user can only perform actions allowed by the group and others' permissions.
    If the user is not in the group associated with the file, the user's permissions will fall back to the 'others' category.



                SPECIAL PERMISSIONS (Setuid, Setgid, Sticky bit)
            ======================================================
the `s` bit in permissions stands for special permissions:

    * Setuid (`s` for user)
        - When set on an executable file, it allows the file to be executed with the permissions of the file owner.
        - EXAMPLE
            1. File with `setuid` bit set.
                - owner: `john`
                - Permissions : `rwsr-xr-x`
                - User: `mark` (you are in the group that has execution permission)

                    * if mark executes this file, it runs with `john`'s permissions.

                    - to add setuid to a file:        
                        EG.
                            chmod u+s filename

                            - if you want to set the same permission for al files in a directory:
                                EG.
                                    chmod -R 777 ./directory/name

    * Setgid (`s` for group)
        - When set on an executable file, it allows the file to be executed with the permissions of the group owner.
        - When set on a directory, it means that files created in the directory inherit the group ownership from the directory.
            EG.
                chmod g+s directory.

    * Sticky bit (`t`)
        - When set on a directory, it means that only the owner of a file can delete or rename the file within that directory.
            EG.
                chmod +t directory.


                    USER MANAGEMENT.
                ======================
- To create a new user.
    EG.
        sudo adduser username --> sudo adduser steve.


- To change the password of a user or give password to a user.
    EG.
        sudo passwd username --> sudo passwd steve 

        - All this is possible because the sudo allows us to be in root.
        - the root acts as admin thus allowing us to change all this.
        - if you don't want a user to have this access then you can remove sudo group from the username.
            EG.
                sudo gpasswd -d steve sudo.


- To remove a user.
    EG.
        sudo deluser username --> sudo deluser steve 


- To remove the home directory so that its hard to find.
    EG.
        sudo deluser --remove-home steve 

            - you can also create a user without the home directory.
                EG.
                    sudo useradd -M hacker


- Checking all the users on a machine.
    EG.
        cut -d: -f1 /etc/passwd    


                USERS AND GROUPS
            =============================
- To add the current user to a group, use the `usermod` command:
    EG.
        sudo usermod -aG groupname username

            - For example, to add the current user `john` to the group `developers`:
                EG.
                    sudo usermod -aG developers john.

            - if you want to make the user steve to become root 
                EG.
                    sudo usermod -aG root steve 


- To remove a user from a group , use the gpasswd .
    EG.
        sudo gpasswd -d username groupname 

            - for example, to remove the user steve from sudo.
                EG.
                    sudo gpasswd -d steve sudo 

                        - this action will disallow the user steve from being able to use sudo and its relative commands.


- To get all the groups available on your system.
    EG.
        getent group 
            OR 
        cat /etc/group 


- To get the members in a group we use:
    EG.
        getent group groupname  --> getent group sudo.


- To check all the group a user is in.
    EG.
        groups username.  ----> groups mark                         

            - if you want to check all the groups the current logged in user is a member of: 
                EG.
                    groups 
                      OR 
                    id 


            Manual Removal of a User
        -----------------------------------
1. Removing a User from /etc/passwd
    - Impact: If you remove a user entry from /etc/passwd, the system no longer recognizes that user. They cannot log in, and their home directory and files might become inaccessible (if not removed). However, if the corresponding entry still exists in /etc/shadow, some parts of the system might still retain certain information about the user.
        EG.
            sudo sed -i '/markv/d' /etc/passwd

    - What Happens: The user markv will no longer have any valid login information, and they will be unable to access the system. If their entry is removed from /etc/passwd, but still exists in /etc/shadow, you might encounter inconsistencies or errors related to authentication.

2. Removing a User from /etc/shadow
    - Impact: Removing a user from /etc/shadow removes their password and related authentication information. If the entry is removed while the user entry still exists in /etc/passwd, the user will have no valid password and will not be able to authenticate using the password.
        EG.
            sudo sed -i '/markv/d' /etc/shadow

    - What Happens: The user markv will have no valid password and cannot log in using a password. If their entry is removed from /etc/shadow but still exists in /etc/passwd, their account will appear to exist, but they cannot access it because thereâ€™s no valid authentication method.