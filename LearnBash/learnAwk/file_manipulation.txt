                                FILE MANIPULATION.
                            =========================
- awk is primarily used to read files, process their content line by line, and extract or manipulate specific data.


                EXAMPLES.
            ----------------
1. Print Entire File.
    - Basic use of awk to display file content.
        EG.
            awk '{print}' file.txt

                - {print} prints each line of the file.


2. Select Specific columns
    - Extract specific fields (columns) from a file.
        EG.
            awk '{print $1, $3}' file.txt 

                - $1 refers to the first column, $3 to the third.
                - Columns are seperated by whitespace by default.
                - use -F to specify a custom delimeter. (e.g comma for csv)

                    EG with delimeters.
                        awk -F',' '{print $2, $4}' data.csv


3. Print line numbers.
    - Display lines with their line numbers.    
        EG.
            awk '{print NR, $0}' file.txt

                - NR is a built-in variable for the current line number.
                - $0 refers to the entire line content.


4. Filter lines by a keyword.
    - Prints lines containing a specific word.
        EG.
            awk '/keyword/' file.txt

                - /keyword/ matches lines containing the word "keyword".


5. Count lines.
    - Count the total number of lines in a file.
        EG.
            awk 'END {print NR}' file.txt

                - END is a block executed after processing all lines.
                - NR holds the total number of lines processed.


6. Sum a Column
    - Calculate the sum of a numeric column:
        EG.
            awk '{sum += $2} END {print sum}' data.txt

                - sum accumulates the values in column 2.
                    > If the value in $2 is numeric, it will be added to the variable sum.
                    > If the value is not numeric, awk treats it as 0 in the addition.
                    > This means non-numeric entries do not contribute to the sum, and no errors occur.
                - END prints the total sum after processing.


7. Display Lines Based on a Condition
    - Show lines where a specific column meets a condition:
        EG. 
            awk '$3 > 50' file.txt

                - Filters lines where the third column is greater than 50.
                - If $3 contains a string (e.g., "hello"), awk attempts a numerical comparison.
                - Strings are treated as 0 in numerical contexts, so any non-numeric value fails the condition unless explicitly > 0.


8. Print the Last Line
    - Retrieve the last line of the file:
        EG.
            awk 'END {print $0}' file.txt

                - END {print $0} runs after all lines are processed and prints the last one.


9. Print Lines in Reverse Order
    - Reverse the order of lines in a file:
        EG.
            awk '{lines[NR] = $0} END {for (i = NR; i > 0; i--) print lines[i]}' file.txt

                - Stores each line in an array lines.
                - Prints lines in reverse order during the END block.


10. Replace a Delimiter
    - Change a fileâ€™s delimiter from one character to another (e.g., commas to tabs):
        EG.
            awk -F',' '{OFS="\t"; $1=$1; print}' file.csv

                - -F',' sets the input delimiter to a comma.
                - OFS="\t" sets the output delimiter to a tab.
                - $1=$1 reassembles the fields with the new delimiter.


11. Get a specific line number.
    EG.
        awk "NR == 1" file.txt

            - NR is the current line number.
            - this condition matches only the first line.

                EG. getting the 5th line.
                    awk "NR == 5" file.txt


12. Get a range of lines.
    EG.
        awk 'NR >= 3 && NR <= 5' file.txt

            - Matches lines 3 through 5.
            - Replace 3 and 5 with the desired start and end line numbers.


13. Get Multiple specific lines.
    EG.
        awk 'NR == 2 || NR == 4 || NR == 6' file.txt

            - ||: Logical OR.
            - This prints the 2nd, 4th, and 6th lines.