                        START-JOB.
                    =================
- in powershell the `start-job ` command is used to run in the background.


        BASIC SYNTAX.
    --------------------
Start-Job -ScriptBlock { <Commands> }


> Start-Job:
    - Runs a command or script in the background.

> Get-Job:
    - Checks the status of jobs.

> Receive-Job:
    - Retrieves the results of a job.

> Remove-Job:
    - Removes the job from the job queue.

> Wait-Job:
    - Waits for one or more jobs to complete.


        COMMON USES.
    ------------------
1) Running a simple command in the background.
    EG.
        # Running a command in the background
        Start-Job -ScriptBlock { Get-Process }


2) Running a Script
    EG.
        $scriptPath = "C:\path\to\your\script.ps1"
        $scriptArguments = "argument1 argument2"

        $job = Start-Job -FilePath $scriptPath -ArgumentList $scriptArguments


3) Running `start-Process` in the background.
    EG.
        $executionPolicy = "Bypass"
        $scriptPath = "C:\path\to\your\script.ps1"
        $scriptArguments = "argument1 argument2"

        $job = Start-Job -ScriptBlock {
            Start-Process powershell.exe -Verb RunAs `
                -ArgumentList "-NoProfile -ExecutionPolicy $using:executionPolicy -File `"$using:scriptPath`" $using:scriptArguments"
        }

            > $using:variable : the $using scope modifier is used to pass variables from the local scope to the remote or job scope.
            > start-Process : This command starts a new process with teh specified arguments.


4) Monitoring Job Status.
    EG.
        # Check job status
        Get-Job

        # Retrieve job results
        Receive-Job -Id $job.Id

        # Remove job after completion
        Remove-Job -Id $job.Id

            > You can check the status of your background job using Get-Job and retrieve the results with Receive-Job.


5) Running multiple jobs and waiting for completion.
    EG.
        # Start multiple jobs
        $job1 = Start-Job -ScriptBlock { Start-Sleep -Seconds 5; "Job 1 completed" }
        $job2 = Start-Job -ScriptBlock { Start-Sleep -Seconds 10; "Job 2 completed" }

        # Wait for all jobs to complete
        Wait-Job -Job $job1, $job2

        # Retrieve results
        Receive-Job -Job $job1
        Receive-Job -Job $job2

        # Clean up
        Remove-Job -Job $job1, $job2

            > You can start multiple jobs and wait for all of them to complete using Wait-Job.


6) Handling Job Output and Errors.
    EG.
        $job = Start-Job -ScriptBlock { 
            Write-Output "This is output"
            Write-Error "This is an error"
        }

        # Wait for the job to complete
        Wait-Job -Id $job.Id

        # Retrieve output and errors
        $output = Receive-Job -Id $job.Id -ErrorAction SilentlyContinue

        # Display output
        $output | ForEach-Object {
            if ($_.GetType().Name -eq "ErrorRecord") {
                Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
            } else {
                Write-Host "Output: $_"
            }
        }

        # Clean up
        Remove-Job -Id $job.Id

            > You can handle output and errors from jobs by using Receive-Job.

