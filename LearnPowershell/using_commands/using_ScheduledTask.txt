                        SCHEDULED TASK.
                    =======================
- Provides cmdlets to create, delete, configure, and manage scheduled tasks.
- Automates recurring operations or runs scripts at defined times.
- GUI alternative: Task Scheduler (Win+R → taskschd.msc).


            OVERVIEW
        ===================
1) Creating and Registering Tasks
    > New-ScheduledTaskAction
    > New-ScheduledTaskTrigger
    > New-ScheduledTaskPrincipal
    > New-ScheduledTaskSettingsSet
    > Register-ScheduledTask

2) Managing Tasks
    > Get-ScheduledTask
    > Set-ScheduledTask
    > Start-ScheduledTask
    > Stop-ScheduledTask
    > Unregister-ScheduledTask
    > Enable-ScheduledTask
    > Disable-ScheduledTask

3) Viewing Task Information
    > Get-ScheduledTaskInfo
    > Get-ScheduledTaskTrigger


            USAGE
        -------------
1. Creating and registering a task.
    - To create a task we need to define:
        i) Actions.
        ii) Triggers.
        iii) principals.
        iv) settings.

    > New-ScheduledTaskAction.
        - Define the action to be performed by the task.
            EG.
                $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-File C:\Scripts\MyScript.ps1"

                    -Execute : specifies the program to run.
                    -Argument : specifies the arguments for the programs.


    >New-ScheduledTaskTrigger.
        - Defines when the task will run.
            EG.
                $trigger = New-ScheduledTaskTrigger -AtStartup 

                    -AtStartup: Runs the task at startup.(before login)
                    -AtLogon : Runs on user login, Most common for persistence.
                    -OnIdle : Good for stealth. Waits for user to go idle. 
                        : OnIdle isn’t guaranteed—it’s based on Windows power & idle settings.
                        : Some users tweak or disable them.
                    - Daily, weekly : Time-based triggers, Flexible.
                    -OnEvent : Runs when a specific event is logged (e.g. login failed), Ninja level stuff.

            EG. (for daily trigger.)
                $trigger = New-ScheduledTaskTrigger -Daily -At "6:00AM"


    >New-ScheduledTaskPrincipal.
        - Defines the user context under which the task runs.
            EG.
                 $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest

                    -UserId : Specifies the user account/who runs the task.
                            * "SYSTEM" : full privilege, can run before user logon.
                            * "NT AUTHORITY\LOCAL SERVICE" : limited system account.
                            * "DOMAIN\USER" or "ComputerName\User" : a specific user.
                            | Feature           | **User Task**                    | **System Task**                           |
                            | ----------------- | -------------------------------- | ----------------------------------------- |
                            | Requires Admin?   | ❌ No                             | ✅ Yes                                  |
                            | Trigger point     | After user logs in               | At boot, before or during login screen    |
                            | Who runs it?      | Logged-in user                   | SYSTEM / NT AUTHORITY                     |
                            | Visibility        | Visible to current user          | Only visible from Admin context           |
                            | Safe Mode?        | ❌ Often doesn't run              | ✅ May run depending on Safe Mode type  |
                            | Background / GUI? | Can pop up console unless hidden | Can run silent with `-WindowStyle Hidden` |

                    -LogonType: Specifies the logon type/ when and how the task runs. Common options include:
                        * ServiceAccount: The task will run under a service account(runs as NT AUTHORITY\SYSTEM, LocalService or Network Service).
                            : doesn't require user login and runs in the background .
                        * Interactive: The task will run interactively / after the user logs in.
                            : Tasks run only when the specified user is logged in. (UI visible)
                        * Password : Runs with stored credentials .
                            : doesn't require user login but need creds. 
                        * S4U (RunAs) : Runs similar to password without stored password.
                            : doesn't require user to log in.
                            : uses Kerberos delegation (LogonType=S4U)
                        * Interactive Token: only with active user session.
                            : requires the user to log in.
                            : smilar to Interactive but stricter.

                    -RunLevel: Specifies the privileges for the task. Options include:
                        LeastPrivilege: Runs with the least privileges.(normal execution)
                        Highest: Runs with the highest privileges available to the user account.


    > New-ScheduledTaskSettingsSet
        - Defines additional settings for the ScheduledTask
            EG.
                $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable

                    -AllowStartIfOnBatteries : Allows the task to start if teh computer is running on battery power.
                    -DontStopIfGoingOnBatteries : Prevents the task from stopping if the computer switches to battery power.
                    -StartWhenAvailable : Starts the task as soon as possible after a scheduled start is missing.
                    - StartWhenAvailable
                    - RestartCount, RestartInterval
                    - ExecutionTimeLimit
                    - AllowHardTerminate


    > Register-ScheduledTask.
        - Registers a new scheduled task in Task Scheduler.
            > -TaskName : Specifies the name of the task.
            > -Action : Specifies the action for the task.
            > -Trigger : Specifies the trigger for the task.
            > -principal : Specifies the principal for the task.
            > -settings : Specifies the settings for the task.
                EG.
                    Register-ScheduledTask -TaskName "DailyBackupTask" -Action $action -Trigger $trigger -Principal $principal -Settings $settings



2) Managing tasks.
    > Get-ScheduledTask
        -Retrieves the scheduled tasks.
            EG.
                Get-ScheduledTask -TaskName "DailyBackupTask"

                    -TaskName: Specifies the name of the task to retrieve.

            EG.(Gets all the tasks.)
                Get-ScheduledTask


    > Set-ScheduledTask
        - Modifies an existing scheduled task.
        EG.
            Set-ScheduledTask -TaskName "DailyBackupTask" -Trigger $trigger

                -TaskName: Specifies the name of the task to modify.
                -Trigger: Specifies the new trigger for the task.
                -Action: Specifies the new action for the task.
                -Principal: Specifies the new principal for the task.
                -Settings: Specifies the new settings for the task.


    > Unregister-ScheduledTask
        - Deletes a scheduled task.
            EG.
                Unregister-ScheduledTask -TaskName "DailyBackupTask" -Confirm:$false
                            
                    -TaskName: Specifies the name of the task to delete.
                    -Confirm: Suppresses the confirmation prompt.

                    
    > Disable-ScheduledTask
        - Disables a scheduled task.
            EG.
                Disable-ScheduledTask -TaskName "DailyBackupTask"
                    
                    -TaskName: Specifies the name of the task to disable.



    > Enable-ScheduledTask
        - Enables a scheduled task.
            EG.
                Enable-ScheduledTask -TaskName "DailyBackupTask"

                    -TaskName: Specifies the name of the task to enable.



    > Start-ScheduledTask
        - Starts a scheduled task immediately.
            EG.
                Start-ScheduledTask -TaskName "DailyBackupTask"

                    -TaskName: Specifies the name of the task to start.



    > Stop-ScheduledTask
        - Stops a running scheduled task.
          EG.
            Stop-ScheduledTask -TaskName "DailyBackupTask"
                -TaskName: Specifies the name of the task to stop.



3) Viewing task information.
    > Get-ScheduledTaskInfo
        - Retrieves detailed information about a task, including the status and the last run time.
            EG.
                Get-ScheduledTaskInfo -TaskName "DailyScriptTask"

    
    > Get-ScheduledTaskTrigger.
        - Retrieves the triggers for a scheduled task.
            EG.
                (Get-ScheduledTask -TaskName "DailyScriptTask").Triggers


    > Get-ScheduledTaskOptions
        - This reveals hidden behaviours like:
            > AllowDemandStart
            > DisallowStartIfOnBatteries
            > MultipleInstances
            > ExecutionTimeLimit
            > StartWhenAvailable
                EG.
                    (Get-ScheduledTask -TaskName "MyTask").Settings

    > to get userId, Logontype, runlevel and id we can use:
        EG.
            (Get-ScheduledTask -TaskName "Your Task").Principal 

                - UserId : who runs the task.
                - LogonType : When/how it runs.
                - RunLevel : Admin priveleges (Highest = Run As Administrator)

NB: POWERSHELL DOESN'T SUPPORT RENAMING OR MOVING SCHEDULED TASK FOLDERS, SO YOU MUST DELETE AND RECREATE THE TASK UNDER A NEW FOLDER.