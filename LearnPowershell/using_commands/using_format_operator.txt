                                                        THE FORMAT OPERATOR.
                                                ==================================
                    -F OPERATOR.
                -------------------
- The -f operator is PowerShell’s version of the string templating cult — except instead of using mustaches or dollar signs, it uses C#-style formatting.
- You supply a format string and a list of values, and -f injects them at the placeholders.


            BASIC SYNTAX.
        --------------------
EG.
    "{0} is {1} years old" -f "Mark", 30
    # Output: Mark is 30 years old

        - The {0}, {1}, etc. are placeholders for values supplied after the -f.


            USAGE.
        -------------
1. Format Multiple Items
    EG.
        "{0} scored {1} out of {2}" -f "Alice", 95, 100
        # Output: Alice scored 95 out of 100

            - it’s 0-based indexing.


2. Padding, Alignment, and Spacing
    Right-align text in a column:
        EG.
            "{0,10}" -f "PowerShell"
            # Output: " PowerShell"

                - The ,10 means : "make this field 10 characters wide, align to the right"

    Left-align text.
        EG.
            "{0,-10}" -f "PowerShell"
            # Output: "PowerShell "


3. Number Formatting
    EG.
        "{0:N2}" -f 1234.56789
        # Output: 1,234.57   (N2 = 2 decimal places, with comma)

        "{0:C}" -f 42
        # Output: $42.00     (Currency format)

        "{0:X}" -f 255
        # Output: FF         (Hexadecimal)

            - This is C# style formatting codes, inherited directly from .NET.


4. Date Formatting
    EG.
        "{0:yyyy-MM-dd}" -f (Get-Date)
        # Output: 2025-08-07


5. Combine With Loops
    EG.
        1..3 | ForEach-Object {
            "{0}: {1}" -f $_, ("*" * $_)
        }

        # Output:
        # 1: *
        # 2: **
        # 3: ***


- when to ues -f instead of "
    > padded columns.
    > Advanced number/date formatting.
    > Language-agnostic formatting (think .NET, cross-platform)


6.  Real-World Example: Column Formatting
    EG.
        $users = @(
            @{ Name = "Alice"; Score = 95 }
            @{ Name = "Bob"; Score = 82 }
            @{ Name = "Catherine"; Score = 100 }
        )

        foreach ($user in $users) {
            "{0,-12} | {1,5:N0}" -f $user.Name, $user.Score
        }

        # Output:
        # Alice       |    95
        # Bob         |    82
        # Catherine   |   100

            - Left-aligned name, right-aligned score, pretty and table-y.



                    [STRING]::FORMAT()
                ------------------------
| Feature                       | `-f` operator           | `[string]::Format()`                          |
| ----------------------------- | ----------------------- | --------------------------------------------- |
| Syntax Style                  | Compact, operator-based | Verbose, method-based                         |
| Readability (subjective)      | Cleaner for quick tasks | Preferred in C#/strict scripting environments |
| Code Portability (e.g., .NET) | Less portable           | Fully portable to other .NET languages        |
| Use in COM/.NET Interop       | N/A                     | Useful                                        |


        BASIC SYNTAX.
    ---------------------
EG.
    [string]::Format("{0} is {1} years old", "Mark", 30)
    # Output: Mark is 30 years old

        - Exactly like -f, but using a static method from the [string] class.


            USAGE.
        ------------
1. Number formatting 
    EG.
        [string]::Format("Total: {0:C}", 123.45)
        # Output: Total: $123.45


2. Date example.
    EG.
        [string]::Format("Today is {0:dddd, MMMM dd}", (Get-Date))
        # Output: Today is Thursday, August 07


3. Useful in scripting / functions.
    - Imagine you're inside a function or script block where -f feels too cramped.
        EG.
            $name = "Mark"
            $tool = "PowerShell"
            $line = [string]::Format("{0} prefers {1} over bash.", $name, $tool)
            Write-Output $line


4. Localized Number Formatting.
    EG.
        $culture = New-Object System.Globalization.CultureInfo("fr-FR")
        [System.String]::Format($culture, "{0:C}", 1234.56)
        # Output: 1 234,56 €

            - Need to localize? [string]::Format() gives you the lever. -f doesn’t.


5. Used with composite formatting.
    EG.
        $val = 0.123456
        [string]::Format("Percent: {0:P2}", $val)
        # Output: Percent: 12.35%
