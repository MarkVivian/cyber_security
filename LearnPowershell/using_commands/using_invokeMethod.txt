                                                            INVOKE COMMAND.
                                                        =======================
- What it does
    > Executes a command or script block locally or on remote machines (via PowerShell Remoting/WinRM).
    > Can target one machine, many machines, or persistent remote sessions.
    > Supports parallel execution (via -AsJob).


                        SYNTAX.
                    ----------------
EG.
    Invoke-Command
        [-ScriptBlock] <ScriptBlock>
        [-ComputerName <String[]>]
        [-Credential <PSCredential>]
        [-Port <Int32>]
        [-UseSSL]
        [-SessionOption <PSSessionOption>]
        [-ConfigurationName <String>]
        [-ApplicationName <String>]
        [-ThrottleLimit <Int32>]
        [-AsJob]
        [-HideComputerName]
        [-JobName <String>]
        [-InputObject <PSObject>]
        [-Session <PSSession[]>]
        [-ArgumentList <Object[]>]
        [<CommonParameters>]


                    PARAMETERS.
                -------------------
1. -ScriptBlock <ScriptBlock> (Mandatory)
    - The code to run.
    - This is where you drop PowerShell commands.   
        EG.
            Invoke-Command -ComputerName Server01 -ScriptBlock { Get-Service }


2. -ComputerName 
    - Specifies one or more remote computers.
    - Uses WinRM (TCP 5985 for HTTP, 5986 for HTTPS)
        EG.
            Invoke-Command -ComputerName Server01,Server02 -ScriptBlock { Get-Process }


3. -Credential
    - Supply alternate credentials for authentication.
        EG.
            $cred = Get-Credential
            Invoke-Command -ComputerName Server01 -Credential $cred -ScriptBlock { Get-Date }


4. -Port 
    - Custom port for WinRM (default is 5985/5986).
        EG.
            Invoke-Command -ComputerName Server01 -Port 5986 -UseSSL -ScriptBlock { hostname }


5. -UseSSL 
    - force HTTPS (encrypted channel)
        EG.
            Invoke-Command -ComputerName Server01 -UseSSL -ScriptBlock { Get-Date }


6. -SessionOption 
    - customize behaviour (timeouts, proxies, culture, etc.)
        EG.
            $opt = New-PSSessionOption -IdleTimeout 60000
            Invoke-Command -ComputerName Server01 -SessionOption $opt -ScriptBlock { Get-Process }


7. -ConfigurationName
    - Choose a custom endpoint (default is Microsoft.Powershell)
        EG.
            Invoke-Command -ComputerName Server01 -ConfigurationName "MyRestrictedShell" -ScriptBlock { whoami }


8. -ApplicationName
    - Sets the WSMan endpoint app name (default: WSMAN). 
    - Rarely needed unless you have custom WSMan listeners.
        EG.
            Invoke-Command -ComputerName Server01 -ApplicationName "CustomWSMan" -ScriptBlock { hostname }


9. -ThrottleLimit 
    - Limits how many remoting commands run in parallel. Default = 32.
        EG.
            $servers = Get-Content .\servers.txt
            Invoke-Command -ComputerName $servers -ThrottleLimit 10 -ScriptBlock { Get-Uptime }


10. -ASJob 
    - Runs the command as a background job.
        EG.
            Invoke-Command -ComputerName Server01 -ScriptBlock { Start-Sleep 10 } -AsJob


11. HideComputerName 
    - Removes the PSComputerName property from output(cleans results).
        EG.
            Invoke-Command -ComputerName Server01 -ScriptBlock { Get-Date } -HideComputerName


12. -JobName 
    - When using -AsJob, lets you name the job.
        EG.
            Invoke-Command -ComputerName Server01 -ScriptBlock { Get-Process } -AsJob -JobName "ProcCheck"


13. -InputObject
    - Passes piped input to the scriptblock.
        EG.
            "notepad","explorer" | Invoke-Command -ComputerName Server01 -ScriptBlock { param($p) Get-Process $p }


14. -Session 
    - Use existing persistent sessions. (more efficient).
        EG.
            $s = New-PSSession -ComputerName Server01
            Invoke-Command -Session $s -ScriptBlock { Get-HotFix }


15. -ArgumentList 
    - pass arguments into the scriptblock.
        EG.
            Invoke-Command -ComputerName Server01 -ScriptBlock { param($name) Get-Process $name } -ArgumentList "powershell"


16. [CommonParameters]
    - -Verbose, -Debug, -ErrorAction, etc.
        EG.
            Invoke-Command -ComputerName Server01 -ScriptBlock { Get-Service } -Verbose


17. Examples.
    i. Collecting system uptime from all servers in a domain.
        EG.
            $servers = Get-Content .\servers.txt
            Invoke-Command -ComputerName $servers -ScriptBlock { (Get-CimInstance Win32_OperatingSystem).LastBootUpTime }

    ii. Killing a malicious process across multiple servers.
        EG.
            Invoke-Command -ComputerName DC1,DC2,DC3 -ScriptBlock { Stop-Process -Name "mimikatz" -Force }

    iii. Pushing a file to remote servers.
        EG.
            $servers = "Server01","Server02"
            Invoke-Command -ComputerName $servers -ScriptBlock {
                Copy-Item -Path "\\fileshare\tools\agent.msi" -Destination "C:\Temp"
            }

    iv. Gathering event logs for troubleshooting.
        EG.
            Invoke-Command -ComputerName Web01,Web02 -ScriptBlock {
                Get-EventLog -LogName Application -Newest 10
            }

    v. Mass service management.
        EG.
            Invoke-Command -ComputerName (Get-Content .\servers.txt) -ScriptBlock {
                Restart-Service -Name Spooler
            }

    vi. Parallel background execution.
        EG.
            Invoke-Command -ComputerName (Get-Content .\servers.txt) -ScriptBlock {
                Start-Sleep 15; Get-Date
            } -AsJob -JobName "UptimeCheck"


18. Gotchas 
    - Requires Enable-PSRemoting -Force on target.
    - Firewall must allow WinRM.
    - Authentication quirks (Kerberos vs CredSSP vs NTLM).
    - Double-hop problem (remote â†’ remote).
    - Flooding logs if used without ThrottleLimit.