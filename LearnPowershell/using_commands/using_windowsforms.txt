                 Introduction to Windows Forms in PowerShell
            ===================================================
- Windows Forms is a graphical user interface (GUI) framework that allows you to create applications with buttons, labels, textboxes, and other controls in Windows.
- PowerShell can interact with Windows Forms using the System.Windows.Forms namespace, which provides access to controls and forms used to create desktop applications.
- Here's a quick rundown of the basics and how you can use it in PowerShell.
    EG : Creating a Simple Windows Form with PowerShell
        # Load the necessary assembly to work with Windows Forms
        Add-Type -AssemblyName System.Windows.Forms

        # Create the form (the window)
        $form = New-Object System.Windows.Forms.Form
        $form.Text = "My First PowerShell Form" # Title of the form
        $form.Size = New-Object System.Drawing.Size(400, 300) # Size of the form

        # Create a button
        $button = New-Object System.Windows.Forms.Button
        $button.Text = "Click Me"
        $button.Location = New-Object System.Drawing.Point(150, 100) # Position of the button

        # Define the action to be taken when the button is clicked
        $button.Add_Click({
            [System.Windows.Forms.MessageBox]::Show("Button Clicked!", "Info")
        })

        # Add the button to the form
        $form.Controls.Add($button)

        # Show the form (this will display the window and wait for user input)
        $form.ShowDialog()


        Key Concepts:
    -------------------------
Creating a Form:
    You create a form using the New-Object System.Windows.Forms.Form class. The form represents the window that will appear on the screen.
    You can set properties such as the title (Text) and the size of the form (Size).

Adding Controls:
    Controls are the UI elements such as buttons, labels, textboxes, etc.
    For example, you create a button with the New-Object System.Windows.Forms.Button class. You can set properties such as text, position, and size.

Event Handling:
    You can assign actions to controls when they are interacted with. For example, when the button is clicked, we handle the click event with $button.Add_Click({ ... }).
    In this case, we show a message box when the button is clicked using [System.Windows.Forms.MessageBox]::Show().

Displaying the Form:
    The form is displayed using the .ShowDialog() method. This causes the form to be shown and blocks further code execution until the user closes the form.


        Basic Controls:
    --------------------
Button:
    EG.
        $button = New-Object System.Windows.Forms.Button
        $button.Text = "Click Me"
        $button.Location = New-Object System.Drawing.Point(50, 50)
        $form.Controls.Add($button)

Label:
    EG.
        $label = New-Object System.Windows.Forms.Label
        $label.Text = "Enter your name:"
        $label.Location = New-Object System.Drawing.Point(50, 20)
        $form.Controls.Add($label)

TextBox:
    EG.
    $textBox = New-Object System.Windows.Forms.TextBox
    $textBox.Location = New-Object System.Drawing.Point(150, 20)
    $form.Controls.Add($textBox)

MessageBox (for popups):
    EG.
        [System.Windows.Forms.MessageBox]::Show("This is a message", "Message Box Title")


        Working with Layouts:
    ----------------------------
- You can arrange your controls using their Location and Size properties, or you can use containers like FlowLayoutPanel or TableLayoutPanel to manage the layout automatically.
- For example, you can use a FlowLayoutPanel to arrange controls one after the other automatically:
    EG.
        $flowLayoutPanel = New-Object System.Windows.Forms.FlowLayoutPanel
        $flowLayoutPanel.Controls.Add($button)
        $flowLayoutPanel.Controls.Add($label)
        $form.Controls.Add($flowLayoutPanel)


        Customizing Appearance:
    -----------------------------
- Windows Forms allows you to style your controls to some extent, but it's more limited compared to modern UI frameworks like WPF (Windows Presentation Foundation).
- You can set properties like background color, text color, fonts, etc.
    EG.
        $button.BackColor = [System.Drawing.Color]::LightBlue
        $button.Font = New-Object System.Drawing.Font("Arial", 12, [System.Drawing.FontStyle]::Bold)


                EXAMPLES
            ================
            1. FOLDER BROWSER (FOLDERSELECTIONDIALOG)
        -----------------------------------------------
- A Folder Browser allows the user to choose a folder from their file system.
    EG.
        Add-Type -AssemblyName System.Windows.Forms

        # Function to show the folder browser
        function Show-FolderBrowser {
            # Create a new FolderBrowserDialog
            $folderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog
            $folderBrowser.Description = "Select a Folder"
            $folderBrowser.RootFolder = [System.Environment+SpecialFolder]::MyComputer
            $folderBrowser.SelectedPath = $env:USERPROFILE # Default to user profile

            # Show the dialog and check if the user selected a folder
            if ($folderBrowser.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
                Write-Host "Selected Folder: $($folderBrowser.SelectedPath)"
                return $folderBrowser.SelectedPath
            } else {
                Write-Host "No folder selected"
                return $null
            }
        }

        # Call the function to show the folder browser dialog
        Show-FolderBrowser

            >> The FolderBrowserDialog is used to let the user pick a folder from the file system.
            >> The RootFolder is set to MyComputer, which will start the browsing from the "This PC" location.
                - You can change it to other values such as Desktop or MyDocuments.
            >> The SelectedPath is set to $env:USERPROFILE by default, which is the userâ€™s home directory.
            >> The ShowDialog() method shows the dialog and waits for the user to either select a folder or cancel the operation.
            >> If a folder is selected, its path is returned; otherwise, a message is displayed.


            2. FILE BROWSER (OPENFILEDIALOG)
            -----------------------------------
- A File Browser allows the user to choose a file from the file system.
    EG.
        Add-Type -AssemblyName System.Windows.Forms

        # Function to show the file browser
        function Show-FileBrowser {
            # Create a new OpenFileDialog
            $fileDialog = New-Object System.Windows.Forms.OpenFileDialog
            $fileDialog.Title = "Select a File"
            $fileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*" # Set file types (can be adjusted)
            $fileDialog.InitialDirectory = $env:USERPROFILE # Default directory
            $fileBrowser.Multiselect = $false # Set the dialog's multi-select option to false (only allow one file to be selected)
            # Show the dialog and check if the user selected a file
            if ($fileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
                Write-Host "Selected File: $($fileDialog.FileName)"
                return $fileDialog.FileName
            } else {
                Write-Host "No file selected"
                return $null
            }
        }

        # Call the function to show the file browser dialog
        Show-FileBrowser

            >> The OpenFileDialog is used to let the user pick a file.
            >> The Filter property sets the file types that are shown in the dialog. For example, it shows .txt files by default but you can modify the filter to suit your needs (e.g., for images, executables, etc.).
            >> The InitialDirectory is set to $env:USERPROFILE (the user's home directory) by default.
                - You can change this to any path you want to start browsing from.
            >> The ShowDialog() method shows the dialog and waits for the user to either select a file or cancel the operation.
            >> If a file is selected, its path is returned; otherwise, a message is displayed.