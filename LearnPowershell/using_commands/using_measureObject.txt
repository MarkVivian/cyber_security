                            MEASURE OBJECT.
                        ===================
- Measure-Object is used to calculate properties of objects, such as counting the number of objects, summing, finding averages, min/max and more.
- Use Measure-Object to:
    > Count how many objects you have.
    > Get the total/average/min/max value of a property.
    > measure text content (line/word/char count)
    > Create summaries for automation/logging reports


        SYNTAX.
    =============
    EG.
        Measure-Object [-Property] <string[]> [-Sum] [-Average] [-Maximum] [-Minimum] [-InputObject <psobject>]

            - It accepts objects via pipeline or -InputObject.


            BASIC USAGE.
        ==================
1. Counting how many files in a folder.
    EG.
        Get-ChildItem -Path .\Downloads | Measure-Object

            > it counts how many objects were piped in.


2. count, Sum, average the size of files.
    EG.
        Get-ChildItem -Path "C:\Files\*.txt" | Measure-Object -Property Length -Sum -Minimum -Maximum -Average

        OUTPUT.
            Count    : 609
            Average  : 1813266.48604269
            Sum      : 1104279290
            Maximum  : 12566060
            Minimum  : 103887
            Property : Length


4. Counting Lines, Words, and Characters in Text Files
    EG.
        # Counts lines, words, and characters in a text file
        Get-Content -Path "C:\Files\example.txt" | Measure-Object -Line -Word -Character

        OUTPUT.
            Lines     : 50
            Words     : 500
            Characters: 2500


5. Measuring the Length of Strings
    - You can use Measure-Object to calculate the total length of strings in an array.
        EG.
            # Measures the total length of all strings in an array
            @("PowerShell", "is", "awesome!") | Measure-Object -Property Length -Sum

            OUTPUT.
                Count    : 3
                Sum      : 20


6. Get Stats for custom-calculated fields.
    - You can't script blocks directly inside Measure-Object, so you need to precalculate.
        EG.
            Get-ChildItem | ForEach-Object { $_.Length / 1MB } | Measure-Object -Sum -Average

                - Convert size to MB before measuring.


3. Measure-Object with Grouping
    - Measure-Object can be combined with other cmdlets like Group-Object to perform more complex calculations.
        EG.
            # Groups files by extension and measures the count and total size for each group
            Get-ChildItem -Path "C:\Files\*" | Group-Object Extension | ForEach-Object {
                [PSCustomObject]@{
                    Extension = $_.Name
                    Count     = $_.Count
                    TotalSize = ($_.Group | Measure-Object -Property Length -Sum).Sum
                }
            }
