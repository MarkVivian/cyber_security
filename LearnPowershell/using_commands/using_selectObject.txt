                    SELECT OBJECT.
                =====================
- The Select-Object cmdlet in PowerShell allows you to choose and display specific properties from objects returned by other cmdlets. 
- It's a versatile tool for customizing the output you see in the console or for further processing in your scripts.


            BASIC SYNTAX.
        =====================
EG.
    Select-Object [-Property] <Object[]> [-ExcludeProperty <String[]>] [-ExpandProperty <String>] [-First <Int32>] [-Last <Int32>] [-Unique]

    -Property: Specifies the properties (or columns) to include in the output. You can specify one or more property names.
    -ExcludeProperty: Specifies properties to exclude from the output.
    -ExpandProperty: Expands a single property that contains objects, showing its contents directly.
    -First: Limits the output to the first n objects.
    -Last: Limits the output to the last n objects.
    -Unique: Removes duplicates from the output, returning only unique values.


                    USAGES.
                =================
1. selecting multiple specific properties.
    EG.
        Get-Process | Select-Object Name, Id

            - This command retrieves all running processes and displays only the Name and Id properties for each process using Select-Object.
            - if you want a full object dump for recon
                EG.
                    Get-Process | Select-Object *


2. wildcard characters.
    EG.
        Get-Process | Select-Object Name, *Working*

            - This selects Name and all properties containing "Working" in their name (e.g., CPUWorkingSet, WorkingDirectory).


3. Excluding Properties.
    EG.
        Get-Process | Select-Object -ExcludeProperty Description

            - This selects all properties except Description for each process.


4. Format output 
    EG.
        Get-Process | Select-Object Name, CPU | Format-Table

            - This displays Name and CPU properties of processes in a table format.


5. Expand properties.
    - If a property contains a nested object (like an array or object), you can expand it to show its contents directly using -ExpandProperty.
        EG. 
            Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | Select-Object -ExpandProperty DisplayName

            - This command will show just the DisplayName values (without extra metadata) for all software listed in the registry.


6. Limit results.
    - Sometimes you might not want all results, just the first or last few.
        > First:    
            EG.
                Get-Process | Select-Object Name, CPU -First 5

                - This will only show the first 5 processes with their names and CPU usage.

        > LAST:
            EG.
                Get-Process | Select-Object Name, CPU -Last 5

                - This will show the last 5 processes in the list.


7. Get Unique values.
    - If you're dealing with repeated values and want to see only unique entries, you can use -Unique.
        EG.
            Get-Process | Select-Object Name -Unique

            - This will show the unique process names, removing duplicates.


8. Select computed and nested properties .
    select computed properties (i.e create custom columns)
        EG.
            Get-Process | Select-Object Name, @{Name="RAMMB";Expression={[math]::Round($_.WS / 1MB, 2)}}

                > Lets break it down.
                    @{} 
                        - this is a hashtable (Powershell's dictionary-like structure)
                        - its used to define a new custom property in the output.

                    Name="RAAMB"
                        - This defines the name of the column in the output - like renaming or aliasing the property.

                    Expression={...}
                        - This is the logic that tells powershell how to calculate the value for that column.
                        - Inside the script block {}, powershell runs whatever you write for each object passed down the pipeline.
                    
                    $_ 
                        - This refers to the current object in the pipeline.
                        - So for each process returned by Get-Process, $_ refers to that specific process object.

                    $_.WS   
                        - WS is a property on the process object that refers to working set memory (basically RAM usage in bytes).
                        - 1MB is an automatic constant in powershell: 1MB = 1024 * 1024.
                
                > so the expression Divides bytes to convert to megabytes and rounds it to 2 decimal places.

    select nested properties with flattening.
        EG.
            Get-ChildItem | Select-Object Name, @{Name="SizeKB";Expression={($_.Length/1KB).ToString("F2")}}

                > Break it down:
                    $_ 
                        - Each file in the folder.

                    Length 
                        - file size in bytes.
                    
                    Divided by 1KB to convert to kilobytes

                    ToString("F2")
                        - formats number to 2 decimal places.

    process RAM in MB and GB
        EG.
            Get-Process | Select-Object Name, 
                @{Name="RAM_MB"; Expression={[math]::Round($_.WS / 1MB, 2)}}, @{Name="RAM_GB"; Expression={[math]::Round($_.WS / 1GB, 3)}}

    Show Process start time and uptime.
        EG.
            Get-Process | Select-Object Name, StartTime,
                @{Name="Uptime_Minutes"; Expression={((Get-Date) - $_.StartTime).TotalMinutes.ToString("F1")}}

    Detect suspicious parent process Name.
        EG.
            Get-WmiObject Win32_Process | Select-Object Name, ProcessId, ParentProcessId,
                @{Name="ParentName"; Expression={(Get-Process -Id $_.ParentProcessId -ErrorAction SilentlyContinue).Name}}

    Check if File is older than x days.
        EG.
            Get-ChildItem C:\Logs -File | Select-Object Name, LastWriteTime,
                @{Name="DaysOld"; Expression={(New-TimeSpan -Start $_.LastWriteTime).Days}},
                @{Name="Stale"; Expression={((New-TimeSpan -Start $_.LastWriteTime).Days -gt 30)}}

    Combine properties into a new string.
        EG.
            Get-Process | Select-Object Id, Name,
                @{Name="Info"; Expression={"[$($_.Id)] $($_.Name)"}}
        
    Output File Permissions in friendly format.
        EG.
            Get-ChildItem C:\SomeFolder | Select-Object Name,
                @{Name="Owner"; Expression={(Get-Acl $_.FullName).Owner}},
                @{Name="Rights"; Expression={(Get-Acl $_.FullName).AccessToString}}

    Show Total file count and size in folder.
        EG.
            Get-ChildItem C:\Stuff -Directory | Select-Object Name,
                @{Name="FileCount"; Expression={(Get-ChildItem $_.FullName -File -Recurse | Measure-Object).Count}},
                @{Name="TotalMB"; Expression={[math]::Round((Get-ChildItem $_.FullName -File -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2)}}

    Check running services and their start type.
        EG.
            Get-Service | Select-Object Name, Status,
                @{Name="StartType"; Expression={(Get-WmiObject Win32_Service -Filter "Name='$($_.Name)'").StartMode}}

    Generate CSV-safe output with derived fields.
        EG.
            Get-Process | Select-Object Name, Id,
                @{Name="IsIdle"; Expression={($_.CPU -eq $null)}},
                @{Name="UserName"; Expression={(Get-WmiObject Win32_Process -Filter "ProcessId=$($_.Id)").GetOwner().User}}

    