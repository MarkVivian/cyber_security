                                                    COMPARE OBJECT.
                                                =======================
- takes two input collections and tells you the differences between them.
- Perfect for:
    > Finding files that exist in one folder but not another
    > Comparing before/after snapshots
    > Analyzing user or process differences
    > Detecting changes between datasets


            BASIC SYNTAX.
        ---------------------
EG.
    Compare-Object -ReferenceObject <listA> -DifferenceObject <listB>

        EG.
            Compare-Object -ReferenceObject @("apple", "banana", "cherry") -DifferenceObject @("banana", "cherry", "durian")

                OUTPUT.
                    InputObject SideIndicator
                    ------------ -------------
                    apple        <=
                    durian       =>

                    <= in reference only.
                    => in difference only.

| Option              | Purpose                                       |
| ------------------- | --------------------------------------------- |
| `-ReferenceObject`  | Baseline data (e.g., “before”)                |
| `-DifferenceObject` | Data to compare against (“after”)             |
| `-IncludeEqual`     | Show matching values too                      |
| `-ExcludeDifferent` | Hide mismatches, only show matches            |
| `-PassThru`         | Output raw values instead of diff table       |
| `-Property`         | Compare only this property on complex objects |
| `-CaseSensitive`    | Enforce casing differences                    |


                USE CASE.
            ---------------
1. Compare Running processes on Two Machines.
    EG.
        $local  = Get-Process | Select-Object -ExpandProperty Name
        $remote = Invoke-Command -ComputerName REMOTE-PC { Get-Process | Select-Object -ExpandProperty Name }

        Compare-Object -ReferenceObject $local -DifferenceObject $remote

            - Shows what processes are unique to each machine.


2. Detect file differences in two folders.
    EG.
        $folder1 = Get-ChildItem "C:\FolderA" | Select-Object -ExpandProperty Name
        $folder2 = Get-ChildItem "C:\FolderB" | Select-Object -ExpandProperty Name

        Compare-Object $folder1 $folder2

            - Use -IncludeEqual if you want matching entries too:
                EG.
                    Compare-Object $folder1 $folder2 -IncludeEqual


3. Use -Passthru to get raw values.
    EG.
        Compare-Object $list1 $list2 -PassThru

            - Instead of a diff table, it gives you the actual objects that differ.


4. Compare complex objects by property.
    EG.
        $list1 = Get-Process | Select-Object -First 5
        $list2 = Get-Process | Select-Object -Last 5

        Compare-Object $list1 $list2 -Property Name

            - You can compare objects based on a specific property like Name, Id, StartTime.


5. Case sensitivity.
    - Its case-insensitive by default.
        EG.
            Compare-Object @("Mark") @("mark")

                - No diff shown.
    
    - Use -CaseSensitive to change that:
        EG.
            Compare-Object @("Mark") @("mark") -CaseSensitive

                - Output.
                    Mark <=
                    mark =>


