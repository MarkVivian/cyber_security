INVOKE WEB REQUEST
=========================

The Invoke-WebRequest cmdlet is used to send HTTP and HTTPS requests to a web page or web service.
This cmdlet can be used to download content from a web page, post data to a web service, and more.

DETAILED EXPLANATION


Invoke-WebRequest:

Sends an HTTP/HTTPS request to the specified URI.
Supports HTTP methods like GET, POST, PUT, DELETE, etc.


Uri:

Specifies the URI of the web request.
Example: http://example.com/api/data


Method:

Specifies the HTTP method to use (e.g., GET, POST, PUT, DELETE).
Default is GET.
Example: -Method POST


Body:

Specifies the data to send to the web service.
Can be a string, hashtable, or byte array.
Example: -Body '{"key": "value"}'


ContentType:

Specifies the media type of the data being sent (e.g., application/json, application/xml).
Example: -ContentType "application/json"


Headers:

Specifies custom headers for the request.
Example: -Headers @{"Authorization" = "Bearer token"}


OutFile:

Specifies the path and file name to save the response content.
Example: -OutFile "C:\path\to\file.txt"


Credential:

Specifies user credentials to use for the web request.
Example: -Credential (Get-Credential)


UseBasicParsing:

Uses basic HTML parsing (useful when Internet Explorer components are not installed).


Additional Parameters:

-TimeoutSec: Sets the timeout in seconds.
-Proxy: Specifies a proxy server.
-SessionVariable: Creates a web request session.



COMMON USES

1) Downloading a File

This example shows how to download a file from a given URL and save it to a specified location.$url = "https://download.microsoft.com/download/2/7/A/27AF1BE6-DD20-4CB4-B154-EBAB8A7D4A7E/officedeploymenttool_17531-20046.exe"
$output = "C:\Users\YourUsername\Downloads\officedeploymenttool_17531-20046.exe"

Invoke-WebRequest -Uri $url -OutFile $output

Write-Host "File downloaded to $output"



2) Fetching Web Page Content

This example fetches the HTML content of a web page.$url = "https://www.microsoft.com/en-us/download/details.aspx?id=49117"
$response = Invoke-WebRequest -Uri $url

$htmlContent = $response.Content

Write-Host "HTML content fetched"



3) Sending Data to a Web Service

This example sends a JSON payload to a web service using the POST method.$url = "https://example.com/api/data"
$data = @{
    Name = "John Doe"
    Age = 30
} | ConvertTo-Json

$response = Invoke-WebRequest -Uri $url -Method Post -Body $data -ContentType "application/json"

Write-Host "Response received: $($response.StatusCode)"



4) API Interactions

GET Request:

Fetches data from an API endpoint.

$url = "https://api.example.com/data"
$response = Invoke-WebRequest -Uri $url -Method Get

$jsonResponse = $response.Content | ConvertFrom-Json
Write-Host "Data: $($jsonResponse)"


POST Request with JSON Body:

Sends data to an API endpoint.

$url = "https://api.example.com/data"
$body = @{
    key = "value"
} | ConvertTo-Json

$response = Invoke-WebRequest -Uri $url -Method Post -Body $body -ContentType "application/json"

Write-Host "Response: $($response.Content)"


Passing Headers:

Includes custom headers like authentication tokens.

$url = "https://api.example.com/protected"
$headers = @{
    "Authorization" = "Bearer your_token_here"
}

$response = Invoke-WebRequest -Uri $url -Method Get -Headers $headers

Write-Host "Protected data: $($response.Content)"



5) Pentesting with Invoke-WebRequest

Testing for Vulnerabilities:

Simulate HTTP requests to test web application security (e.g., SQL injection).

$url = "https://example.com/login"
$maliciousPayload = @{
    username = "admin' --"
    password = "password"
} | ConvertTo-Json

$response = Invoke-WebRequest -Uri $url -Method Post -Body $maliciousPayload -ContentType "application/json"

Write-Host "Response: $($response.Content)"


Fuzzing:

Send multiple requests with varying parameters to find vulnerabilities.

$url = "https://example.com/api/fuzz"
for ($i = 0; $i -lt 100; $i++) {
    $body = @{
        param = "test$i"
    } | ConvertTo-Json

    try {
        $response = Invoke-WebRequest -Uri $url -Method Post -Body $body -ContentType "application/json"
        Write-Host "Response for test$i: $($response.StatusCode)"
    } catch {
        Write-Host "Error for test$i: $_"
    }
}


Checking for Open Redirects:

Test if the application redirects to external URLs.

$url = "https://example.com/redirect?url=http://malicious.com"
$response = Invoke-WebRequest -Uri $url -Method Get -MaximumRedirection 0 -ErrorAction SilentlyContinue

if ($response.Headers.Location -like "*malicious.com*") {
    Write-Host "Open redirect vulnerability detected!"
}



