                                INTERCEPTING HTTP TRAFIC. (DVWA USED.)
                            ============================================
Step 1: Intercepting HTTP Traffic in DVWA
    - Launch Burp Suite and ensure your proxy is listening on 127.0.0.1:8080 (default) or any other configured IP and port.
    - Open your browser (can be Firefox or Burp’s Chromium browser) and go to DVWA (http://localhost/DVWA or wherever it’s hosted).
    - Start Burp Proxy:
        > Go to the Proxy tab > Intercept sub-tab.
        > Make sure Intercept is on.

    - Capture a Request:
        > Log in to DVWA or perform any action on the site. Burp Suite should intercept the HTTP request.


Step 2: Analyzing the Request
    - Once you intercept the HTTP request, you’ll see it in Burp's Intercept tab.
    - You can analyze the request method, headers, cookies, and body.
    - If you're on the DVWA login page, you’ll be able to see the username and password being submitted in plain text since HTTP traffic is not encrypted.


Step 3: Sending the Request to the Intruder
    > Send to Intruder:
        - Right-click on the intercepted request and select Send to Intruder.
        - This will send the request to Burp's Intruder tool, where you can set up a brute force attack.

    > Set Up Intruder Positions:
        - In the Intruder tab > Positions sub-tab, you will see the captured HTTP request.
        - Manually clear all preselected fields, and then highlight the parameters you want to brute force (such as username and password).
        - Click Add § to mark these as positions for payloads.

    > Set Attack Type:
        - Choose Cluster Bomb if you want to brute force both username and password fields (using combinations from two different wordlists).
        - If you only want to brute force the password field for a known username, choose Sniper mode.
            I. Sniper:
                > Used when you want to brute-force a single field or parameter.
                > You specify one position, and Burp sends each payload (word from the wordlist) to that position in turn.
                > Ideal for testing different values in a single parameter, like a password.

            II. Battering Ram:
                > This attack type uses the same payload for multiple positions.
                > If you have several parameters (like username and password), Burp will insert the same payload into both fields for each request.
                > Useful if you want to test the same value in different parameters simultaneously.

            III. Pitchfork:
                > Allows you to use different payload sets in multiple positions, but it only tests one payload per position at a time.
                > Useful when you want to test specific combinations from two or more lists (like username and password combinations).

            IV. Cluster Bomb:
                > The most comprehensive attack type: it tests all combinations of different payload sets.
                > If you have multiple positions, each payload from the first set is combined with every payload from the second set, etc.
                > Ideal for brute-forcing multiple parameters like username and password with two different lists.

                    ** DIFFERENCE BETWEEN CLUSTER BOMB AND PITCH FORK**
                        PITCH FORK.
                            - Example Setup:
                                > Positions: username and password parameters are marked as payload positions.
                                > Payload Sets:
                                    > Payload set 1: admin, user1, guest
                                    > Payload set 2: password123, 123456, guest123

                            - In pitchfork mode, Burp Suite will match up the items in each payload list in parallel:
                                EG.
                                    Request 1: username=admin, password=password123
                                    Request 2: username=user1, password=123456
                                    Request 3: username=guest, password=guest123

                        CLUSTER BOMB.
                            - Example Setup:
                                > Positions: username and password parameters are marked as payload positions.
                                > Payload Sets:
                                    > Payload set 1: Contains a list of usernames, e.g., admin, user1, guest.
                                    > Payload set 2: Contains a list of passwords, e.g., password123, 123456, guest123.

                            - In cluster bomb mode, Burp Suite will try all possible combinations of these payloads:
                                EG.
                                    Request 1: username=admin, password=password123
                                    Request 2: username=admin, password=123456
                                    Request 3: username=admin, password=guest123
                                    Request 4: username=user1, password=password123
                                    Request 5: username=user1, password=123456
                                    Request 6: username=user1, password=guest123


                    ** Pitchfork vs. Cluster Bomb in Burp Suite Intruder: When to Use Each **
                        > Pitchfork is ideal for situations where:
                            i. You have dynamic tokens (like session tokens or CSRF tokens) that change with each server response.
                            ii. You’re using Burp Suite's grep method to capture these tokens and inject them into the next request automatically.
                            iii. You have a list of passwords or other payloads that you want to match one-to-one with each dynamic token.

                            > Since Pitchfork matches payload sets in parallel, it pairs each new captured token with the next item in your password list.
                            > This is useful when:
                                i. You want to maintain a one-to-one relationship between tokens and passwords, avoiding unnecessary combinations.
                                ii. The tokens are captured on the fly, and you need each token to line up with a specific password in your payload list.

                            > Example:
                                - If the server response provides a new user token on each request, Pitchfork will capture this token, match it with the next password in the list, and send the request efficiently without creating unnecessary combinations.


                        > Cluster Bomb is better suited when:
                            i. You need to test all possible combinations of multiple payload lists.
                            ii. The payloads are static or do not rely on real-time data from responses.
                            iii. You’re performing a brute-force attack where every combination of payloads could yield useful results.

                            > With Cluster Bomb, Burp will try every possible combination across payload positions, which is helpful when:
                                i. You’re testing multiple parameters independently and want to ensure thorough coverage.
                                ii. There’s no need to maintain a strict pairing (e.g., testing every username with every password).

                            > Example:
                                - If you have a list of user tokens and a separate list of passwords, Cluster Bomb will try each token with every password in the list.
                                - This approach is comprehensive but may lead to a high number of requests, so it’s best used when exhaustive testing is required.
        

    > Payload Positioning
        > Payload positioning refers to where you want Burp to insert your payloads (i.e., values from the wordlists).
        > In your intercepted request, you have the following fields that might be worth brute-forcing:
            EG.
                POST /DVWA/vulnerabilities/brute/ HTTP/1.1
                Host: localhost
                ...
                Cookie: security=impossible; PHPSESSID=p1vlis8jg0gba2j8ga7uenoh1j
                Connection: close

                username=admin&password=left&Login=Login&user_token=87ca69305c625c1f296542955f8ae4c6

                    - Here are the fields you can target:
                        > username=admin
                        > password=left
                    
                    - Optionally, you can also try targeting the user_token, but for brute-force attacks, it’s usually unnecessary unless there's session-based authentication.
                    
                    - How to Set Payload Positions:
                        > Highlight the Parameters:
                            = In the Positions tab, highlight the part of the request you want to replace with a payload.
                            = For instance, you can highlight the value after username= (admin), and then click Add §.
                            = Do the same for password=left.

                        > After marking positions, your request should look like this (with § indicating positions for payloads):
                            EG.
                                username=§admin§&password=§left§&Login=Login&user_token=87ca69305c625c1f296542955f8ae4c6


Step 4: Setting Up Payloads
    > Payloads Tab:
        - Go to the Payloads sub-tab.
        - For Payload Set 1, load your username list or use a fixed username if you know it.
        - For Payload Set 2, load a password wordlist.
        
        - Payload options.
            a. Payload Sets
                > In the Payload Sets section, you determine:
                    - Which positions to insert payloads into (these are the positions you set earlier in the Positions tab).
                    - Which payload set corresponds to each position (Payload Set 1, Payload Set 2, etc.).

                > For example:
                    - Payload Set 1 could be a list of usernames for the username field.
                    - Payload Set 2 could be a list of passwords for the password field.

                > The number of payload sets depends on how many positions you want to fill with different data.
                > You can set one or multiple payload sets based on your brute-forcing strategy.

            b. Payload Settings
                > This section allows you to configure what kind of payloads will be inserted into your defined positions.
                > Burp Suite offers a range of options for payloads:
                    - Simple list:
                        > You can use a predefined wordlist (e.g., usernames, passwords). You’ll likely use this for brute-force attacks.
                    
                    - Recursive grep.
                        > you can use extracted data from the response to derive the payload.

                    - Runtime file:
                        > Load a file at runtime and pull payloads from it. Useful for large wordlists.
                    
                    - Numbers:
                        > You can generate numbers within a range, with custom increments (useful for numerical parameters like PINs).
                    
                    - Dates:
                        > Generate payloads in date formats if the target requires date-based parameters.
                    
                    - Brute-forcer:
                        > Automatically generates all possible combinations of characters based on your specified character set (useful for PIN or password brute-forcing with specific length requirements).
                    
                    - Character substitutions:
                        > This allows for generating variations in common passwords by replacing letters with numbers, e.g., turning "password" into "p@ssw0rd".
                    
                    - Custom payload:
                        > Allows you to define your payloads programmatically.

                > For most brute-force attacks, the Simple list option is commonly used.
            
            c. Payload Processing
                - This feature lets you modify the payloads before sending them to the server. You can apply transformations to payloads, such as:
                    > Add a prefix or suffix:
                        - You might want to append a domain (e.g., @example.com) to each payload.
                    
                    > Modify case:
                        - Convert payloads to upper, lower, or mixed case.
                    
                    > Hashing:
                        - Hash the payload using MD5, SHA-1, or other algorithms if the application uses hashed passwords.

                - You can chain multiple processors together if you need more complex transformations.
            
            d. Payload Encoding
                - This ensures the payloads are properly encoded before they are sent, especially when dealing with special characters in URLs, forms, or scripts.
                    > URL-encoding:
                        - This is commonly needed if your payloads contain characters like &, =, or spaces, which have special meaning in URLs.
                    
                    > HTML encoding:
                        - Useful if you are injecting payloads into an HTML form or element.
                    
                    > Base64 encoding:
                        - Useful for applications that accept Base64-encoded data.

    > Start the Attack:
        - Click Start Attack. Burp Suite will send multiple requests, trying different username and password combinations.


Step 5: Analyzing the Results
    - In the Intruder Attack window, look at the response length and status codes to identify successful attempts.
    - A successful login may result in a different response length or a specific status code (like 200 OK for a successful login page).

    > Grep - Match in Burp Suite Intruder
        Grep:
            - Match is a feature in Burp Suite’s Intruder tool that allows you to search for specific expressions or patterns in the response of each request during an attack.
            - This is especially useful for detecting specific outcomes or behaviors in responses, such as identifying if a login succeeded or failed based on certain keywords.
        
        How Grep - Match Works
            Setting Up Grep - Match:
                In the Intruder attack window, go to the settings tab and locate the Grep - Match section.
                Enter the expression or keywords you want to search for in the response (e.g., "Welcome," "Invalid password," or "Success").

            Purpose:
                The Grep - Match feature scans each response for the specified expressions and highlights matches in the attack results.
                By identifying these keywords, it helps you quickly determine the outcome of each request without manually reviewing each response.

            Using Grep - Match to Identify Success or Failure:
                For example, if you're performing a brute-force attack on a login page, you might set "Welcome" or "Login successful" as your Grep - Match keyword. If a response contains this keyword, it indicates a successful login.
                Alternatively, you could set "Invalid password" to detect failed attempts.

            Working with Dynamic Responses:
                Grep - Match is particularly useful in combination with the Pitchfork or Cluster Bomb attack types, as it allows you to pinpoint specific responses where keywords match, even in high-volume attacks.
                It can also be combined with Grep - Extract to pull out dynamic values from matched responses for further inspection.