                Check for Hidden User Token Handling in JavaScript
            ==========================================================
Inspect the HTML/JavaScript of the page:
    - After logging in, check the page source (HTML/JavaScript) to see if the user_token is being generated or updated dynamically.
    - In some cases, the token is inserted into a hidden field or generated by JavaScript and sent with the next request.
    - You can use Burp Suite’s Repeater or Intercept tabs to analyze all requests and responses.
Steps:
    In Burp, go to the Proxy -> HTTP history tab.
    Find the response that follows the login, and search for any hidden fields or JavaScript snippets that might set or update the user_token.
    Look for forms or input fields like this:
        EG.
            <input type="hidden" name="user_token" value="abc123xyz">

    - Additionally, search for any JavaScript that could be setting the value of the user_token:
        EG.
            document.getElementById('user_token').value = generateToken();


                    Capture the Token Using Burp’s Grep - Extract Option
                =============================================================
- Since the user_token might be hidden or generated client-side, you can use Burp’s Grep - Extract feature to capture the token from a previous response or HTML that contains it.
    Steps:
        Go to Intruder -> Options.
        Scroll down to Grep - Extract.
        Add an extraction rule that looks for the user_token in either:
            The HTML source (look for <input type="hidden"> or similar).
            JavaScript code.

    Example:
        - If the token is in a hidden field, you can set the extraction to look for the following:
            EG.
                <input type="hidden" name="user_token" value="([a-zA-Z0-9]+)">

        - The token will be extracted from the response and automatically updated for the next request.


                    Use Burp Suite’s Session Handling with JavaScript-based Token
                ========================================================================
- If the token is only generated by JavaScript (and not sent in responses), Burp might struggle to extract it automatically.
    Workaround:
        Use manual re-login (as we discussed earlier) whenever the session expires or the token changes.
        Use Burp Suite’s Macro feature (in Session Handling Rules) to capture and replay the login process, dynamically updating the token during brute force attacks.

    Configure a Macro:
        Capture the login request that generates the token.
        Set this request as a macro that runs whenever Burp detects that the user_token is invalid or missing.


                        Simulating the Token’s Behavior Using Burp Extensions
                ===================================================================
- If the token is generated using complex JavaScript logic, you might need to simulate this behavior using Burp Extensions.
- Some Burp extensions like "Turbo Intruder" or "JS Beautifier" can help with advanced JavaScript interactions and token generation.

- You can install extensions through Burp’s BApp Store.


                        Monitor JavaScript Execution for Token Updates
                    =======================================================
- If the user_token is being generated by JavaScript, you might need to monitor the JavaScript execution:
    Open Developer Tools in your browser (press F12).
    Go to the Network and Console tabs to monitor any JavaScript activity.
    Look for XHR requests or AJAX calls that may be generating or refreshing the token.


                            Manually Update Tokens as a Fallback
                    ===================================================
- If none of the above work and you can’t figure out how to capture the token automatically:
    > You might need to manually copy the token from the Developer Tools or browser inspection window every time it updates and paste it into Burp Suite.